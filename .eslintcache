[{"C:\\old things\\apps\\discord\\src\\index.js":"1","C:\\old things\\apps\\discord\\src\\Component\\LeftSlide.js":"2","C:\\old things\\apps\\discord\\src\\App.js":"3","C:\\old things\\apps\\discord\\src\\Component\\RightSlide.js":"4","C:\\old things\\apps\\discord\\src\\Component\\Servers.js":"5","C:\\old things\\apps\\discord\\src\\reportWebVitals.js":"6","C:\\old things\\apps\\discord\\src\\Component\\Profile.js":"7","C:\\old things\\apps\\discord\\src\\redux.js":"8","C:\\old things\\apps\\discord\\src\\Component\\Audio.js":"9","C:\\old things\\apps\\discord\\src\\LoginPage\\Login.js":"10"},{"size":712,"mtime":1609659367162,"results":"11","hashOfConfig":"12"},{"size":5775,"mtime":1610015937484,"results":"13","hashOfConfig":"12"},{"size":1322,"mtime":1610013473822,"results":"14","hashOfConfig":"12"},{"size":3510,"mtime":1610015294153,"results":"15","hashOfConfig":"12"},{"size":7974,"mtime":1610017145515,"results":"16","hashOfConfig":"12"},{"size":362,"mtime":499198500000,"results":"17","hashOfConfig":"12"},{"size":1832,"mtime":1610004970070,"results":"18","hashOfConfig":"12"},{"size":1251,"mtime":1610014791673,"results":"19","hashOfConfig":"12"},{"size":3485,"mtime":1609664820638,"results":"20","hashOfConfig":"12"},{"size":1202,"mtime":1610019000424,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13cy0bu",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\old things\\apps\\discord\\src\\index.js",["45"],"C:\\old things\\apps\\discord\\src\\Component\\LeftSlide.js",[],"C:\\old things\\apps\\discord\\src\\App.js",[],"C:\\old things\\apps\\discord\\src\\Component\\RightSlide.js",["46"],"C:\\old things\\apps\\discord\\src\\Component\\Servers.js",["47","48","49","50"],"C:\\old things\\apps\\discord\\src\\reportWebVitals.js",[],["51","52"],"C:\\old things\\apps\\discord\\src\\Component\\Profile.js",["53"],"C:\\old things\\apps\\discord\\src\\redux.js",[],"C:\\old things\\apps\\discord\\src\\Component\\Audio.js",["54","55","56","57"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport \"./audio.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setPeersJs, setSocket } from \"../redux\";\r\n\r\nconst Video = (props) => {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    props.peer.on(\"stream\", (stream) => {\r\n      ref.current.srcObject = stream;\r\n    });\r\n  }, []);\r\n  return <video playsInline autoPlay ref={ref} />;\r\n};\r\n\r\nexport default function Audio() {\r\n  const [peers, setPeers] = useState([]);\r\n  const socketRef = useRef();\r\n  const userVideo = useRef();\r\n  const peersRef = useRef([]);\r\n  const roomID = useParams(\"serverid\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    socketRef.current = io.connect(\"http://localhost:5000/\");\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: false, audio: true })\r\n      .then((stream) => {\r\n        userVideo.current.srcObject = stream;\r\n        socketRef.current.emit(\"join room\", roomID.serverid);\r\n        socketRef.current.on(\"all users\", (users) => {\r\n          const peers = [];\r\n\r\n          users.forEach((userID) => {\r\n            const peer = createPeer(userID, socketRef.current.id, stream);\r\n            peersRef.current.push({\r\n              peerID: userID,\r\n              peer,\r\n            });\r\n            peers.push(peer);\r\n          });\r\n          setPeers(() => {\r\n            return peers;\r\n          });\r\n        });\r\n\r\n        socketRef.current.on(\"user joined\", (payload) => {\r\n          const peer = addPeer(payload.signal, payload.callerID, stream);\r\n          peersRef.current.push({\r\n            peerID: payload.callerID,\r\n            peer,\r\n          });\r\n\r\n          setPeers((users) => [...users, peer]);\r\n        });\r\n\r\n        socketRef.current.on(\"receiving returned signal\", (payload) => {\r\n          const item = peersRef.current.find((p) => p.peerID === payload.id);\r\n          item.peer.signal(payload.signal);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  function createPeer(userToSignal, callerID, stream) {\r\n    const peer = new Peer({\r\n      initiator: true,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"sending signal\", {\r\n        userToSignal,\r\n        callerID,\r\n        signal,\r\n      });\r\n    });\r\n\r\n    console.log(peer);\r\n\r\n    return peer;\r\n  }\r\n\r\n  function addPeer(incomingSignal, callerID, stream) {\r\n    const peer = new Peer({\r\n      initiator: false,\r\n      trickle: false,\r\n      stream,\r\n    });\r\n\r\n    peer.on(\"signal\", (signal) => {\r\n      socketRef.current.emit(\"returning signal\", { signal, callerID });\r\n    });\r\n\r\n    peer.signal(incomingSignal);\r\n\r\n    return peer;\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: setPeersJs.type,\r\n      peers: peers,\r\n    });\r\n    dispatch({\r\n      type: setSocket.type,\r\n      socket: socketRef.current,\r\n    });\r\n  }, [peers]);\r\n  return (\r\n    <div className=\"audio\">\r\n      <video muted ref={userVideo} autoPlay playsInline />\r\n      {peers.map((peer, index) => {\r\n        return <Video key={index} peer={peer} />;\r\n      })}\r\n\r\n      <button\r\n        onClick={() => {\r\n          console.log(peers);\r\n\r\n          peers.forEach((peer) => {\r\n            peer.destroy();\r\n          });\r\n          socketRef.current.emit(\"userDisconnect\");\r\n        }}\r\n      >\r\n        Close\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",["58","59"],"C:\\old things\\apps\\discord\\src\\LoginPage\\Login.js",[],{"ruleId":"60","severity":1,"message":"61","line":8,"column":10,"nodeType":"62","messageId":"63","endLine":8,"endColumn":17},{"ruleId":"64","severity":1,"message":"65","line":88,"column":13,"nodeType":"66","endLine":92,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":29,"column":6,"nodeType":"69","endLine":29,"endColumn":11,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":114,"column":6,"nodeType":"69","endLine":114,"endColumn":8,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":227,"column":31,"nodeType":"75","messageId":"76","endLine":227,"endColumn":33},{"ruleId":"73","severity":1,"message":"74","line":239,"column":31,"nodeType":"75","messageId":"76","endLine":239,"endColumn":33},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"60","severity":1,"message":"81","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"82","line":6,"column":23,"nodeType":"62","messageId":"63","endLine":6,"endColumn":34},{"ruleId":"67","severity":1,"message":"83","line":16,"column":6,"nodeType":"69","endLine":16,"endColumn":8,"suggestions":"84"},{"ruleId":"67","severity":1,"message":"85","line":66,"column":6,"nodeType":"69","endLine":66,"endColumn":8,"suggestions":"86"},{"ruleId":"67","severity":1,"message":"87","line":113,"column":6,"nodeType":"69","endLine":113,"endColumn":13,"suggestions":"88"},{"ruleId":"77","replacedBy":"89"},{"ruleId":"79","replacedBy":"90"},"no-unused-vars","'reduser' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["91"],"React Hook useEffect has missing dependencies: 'messages' and 'socket'. Either include them or remove the dependency array.",["92"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"'useState' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["95"],"React Hook useEffect has a missing dependency: 'roomID.serverid'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["97"],["93"],["94"],{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [sid, socket]",{"range":"108","text":"109"},"Update the dependencies array to be: [messages, socket]",{"range":"110","text":"111"},"Update the dependencies array to be: [props.peer]",{"range":"112","text":"113"},"Update the dependencies array to be: [roomID.serverid]",{"range":"114","text":"115"},"Update the dependencies array to be: [dispatch, peers]",{"range":"116","text":"117"},[1202,1207],"[sid, socket]",[3323,3325],"[messages, socket]",[482,484],"[props.peer]",[2073,2075],"[roomID.serverid]",[2990,2997],"[dispatch, peers]"]